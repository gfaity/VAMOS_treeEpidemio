###
# Nombre de combinaison unique (avant aggregation - sans compter l'année)
nbUniqComb_beforeAgg = length(unique(interaction(data$Position, data$Device, data$EpochDuration, data$DropTime, data$BoutDuration)))
# Informer utulisateur
cat("Nombre de combinaisons uniques (avant aggregation - sans compter l'année) :", nbUniqComb_beforeAgg, "\n")
###
if (doSimpleLeaves){
# Group by min bout durations
#groups = "10-32s", "1min", "2-5min", "10-15min", "30-60min", "?"
data$BoutDuration[which(data$BoutDuration %in% c("1+s"))] <- "1s"
data$BoutDuration[which(data$BoutDuration %in% c("10s-1min", "10s-2min", "10s-10min", "30s-5min", "15+s", "30+s", "32+s", "?s-10min", "10-min", "15-min", "30-min"))] <- "10-32s"
data$BoutDuration[which(data$BoutDuration %in% c("1-3min", "1-5min", "1-9min", "1-10min", "1-15min", "1+min"))] <- "1min"
data$BoutDuration[which(data$BoutDuration %in% c("3-5min", "5-10min", "2+min", "3+min", "5+min"))] <- "2-5min"
data$BoutDuration[which(data$BoutDuration %in% c("10+min"))] <- "10min"
data$BoutDuration[which(data$BoutDuration %in% c("16-40min", "15+min", "30+min", "41+min", "60+min"))] <- "15-60min"
# Group by epoch duration
#groups = "4-6s", "10s", "30s", "60s", "?"
data$EpochDuration[which(data$EpochDuration %in% c("1s"))] <- "1s\u2063" #ajout d'un caractere invisible (espace de largeur zero) pour évité d'être confondu avec 1s de BoutDuration
data$EpochDuration[which(data$EpochDuration %in% c("4s","6s"))] <- "4-6s"
# Group by starting year of Physical Activity Assessment
data$StartYear[which(data$StartYear %in% c("2000","2001","2002","2003","2004"))] <- "2000-2004"
data$StartYear[which(data$StartYear %in% c("2005","2006","2007","2008","2009"))] <- "2005-2009"
data$StartYear[which(data$StartYear %in% c("2010","2011","2012","2013","2014"))] <- "2010-2014"
data$StartYear[which(data$StartYear %in% c("2015","2016","2017","2018","2019"))] <- "2015-2019"
data$StartYear[which(data$StartYear %in% c("2020","2021","2022","2023","2024"))] <- "2020-2024"
}
###
# Set things = specify possibilities in the right order
myStudyIDs = rev(sort(data$StudyID))
myDevices = rev(c("Actical","Actigraph", "Actiheart","Axivity", "GENEActiv","Hookie","Vitamove","Active style","ActivPAL","Lifecorder","SenseWear", "Multiple")) #sort devices in the order of apparition along time #rev(sort(unique(data$Device)))
myDropTimes = unique(data$DropTime) #rev(unique(data$DropTime))
myPositions = rev(c("Hip / Waist", "Chest", "Wrist", "Upper arm", "Thigh", "Multiple")) #rev(c("Wrist", "Upper arm", "Hip / Waist", "Thigh")) #sort(unique(data$Position))
myStartYear = rev(c("2000-2004","2005-2009","2010-2014","2015-2019","2020-2024","?")) #rev(sort(unique(data$StartYear)))
# TEST (TO REMOVE)
#data$EpochDuration[which(data$EpochDuration == "?")] <- "1s"
#data$BoutDuration[which(data$BoutDuration == "?")] <- "2s"
#ATTENTION ! Dans le if ci-dessous j'ai aussi remplacé "?" par "NA" => A voir si je peux remettre ensuite
if (doSimpleLeaves){
myEpochDurations = c("?", "1s\u2063", "4-6s", "10s", "30s", "60s") #rev() #don't reverse finally
myBoutDurations = c("?", "1s", "10-32s", "1min", "2-5min", "10min", "15-60min") #rev() #don't reverse finally
} else {
myEpochDurations = c("?", "1s\u2063", "4s","6s","10s","30s","60s") #rev() #don't reverse finally #unique(data$EpochDuration)
myBoutDurations = c("?", "1+epoch","10s-1min","10s-2min","10s-10min","30s-5min","1-3min","1-5min","1-9min","1-10min","1-15min","3-5min","5-10min","?s-10min","16-40min","1+s","15+s","30+s","32+s","1+min","2+min","3+min","5+min","10+min","15+min","30+min","41+min","60+min","10-min","15-min","30-min") #rev() #don't reverse finally #unique(data$BoutDuration)
}
###
# Reordonnez chaque variable dans l'ordre spécifié
data <- data %>%
mutate(
StudyID = factor(StudyID, levels=myStudyIDs),
Device = factor(Device, levels = myDevices), # Ordre désiré
Position = factor(Position, levels = myPositions),
EpochDuration = factor(EpochDuration, levels = myEpochDurations),
DropTime = factor(DropTime, levels = myDropTimes),
BoutDuration = factor(BoutDuration, levels = myBoutDurations),
StartYear = factor(StartYear, levels = myStartYear)
)
######################################################
# OPTIONNEL: Weighting of width for Sankey diagram by nb of combinaison per study
# CAUTION: à faire uniquement dans le Sankey Diagram
# data <- data %>%
#   mutate(StudyDetails = str_replace(StudyID, "_-_[0-9]+$", ""))
#
# nbCombiMax = max(table(data$StudyDetails))
#
# # Calcul du nombre d'occurrences pour chaque StudyDetails
# data <- data %>%
#   group_by(StudyDetails) %>%
#   mutate(RibbonWidth = 1 / n()) %>%
#   ungroup()
#
# #Remove useless columns
# data$StudyDetails <- NULL
######################################################
# OPTIONNEL: Reordonner les auteurs selon ordre des facteurs
# Case : StartYear / Device / Position / EpochDuration / DropTime / BoutDuration
# Don't forget that all levels are in reverse order
doReorderArticleID <- TRUE #FALSE
if (doReorderArticleID){
# Étape 1 : Créer StudyDetails en supprimant le numéro final
data <- data %>%
mutate(StudyDetails = str_replace(StudyID, "_-_[0-9]+$", ""))
# Étape 2 : Inverser l'ordre des niveaux des facteurs
data <- data %>%
mutate(
StartYear = fct_rev(as.factor(StartYear)),  # Inversion des niveaux
Device = fct_rev(as.factor(Device)),
Position = fct_rev(as.factor(Position)),
EpochDuration = fct_rev(as.factor(EpochDuration)),
DropTime = fct_rev(as.factor(DropTime)),
BoutDuration = fct_rev(as.factor(BoutDuration))
)
# Étape 3 : Trier selon l'ordre inversé des facteurs
data <- data %>%
arrange(StartYear, Device, Position, EpochDuration, DropTime, BoutDuration)
# Étape 4 : Créer interactFactor (uniquement pour information, sans regroupement)
# data$interactFactor <- interaction(data$StartYear, data$Device, data$Position,
#                                    data$EpochDuration, data$DropTime,
#                                    data$BoutDuration, data$StudyDetails, sep = ".")
# Étape 5 : Numéroter les études en respectant l'ordre défini (SANS fusionner les interactFactor)
data <- data %>%
group_by(StudyDetails) %>%
mutate(numero = row_number()) %>%  # Garde la numérotation unique même si interactFactor est le même
ungroup()
# Étape 6 : Recréer StudyID avec la nouvelle numérotation
data <- data %>%
mutate(StudyID = paste0(StudyDetails, "_-_", numero)) %>%
select(-StudyDetails) # On garde groupNum pour info
# Étape 7 : Re-Inverser l'ordre des niveaux des facteurs
data <- data %>%
mutate(
StudyID = fct_rev(as.factor(StudyID)),
StartYear = fct_rev(as.factor(StartYear)),  # Inversion des niveaux
Device = fct_rev(as.factor(Device)),
Position = fct_rev(as.factor(Position)),
EpochDuration = fct_rev(as.factor(EpochDuration)),
DropTime = fct_rev(as.factor(DropTime)),
BoutDuration = fct_rev(as.factor(BoutDuration))
)
# Vérification finale
# print(data$StudyID)
}
######################################################
# OPTIONNEL: virer les niveaux des facteurs qui ne sont pas affectés [nécessaire pour le chi2 test]
data <- data %>% mutate(across(where(is.factor), droplevels))
######################################################
###
# Nombre de combinaison unique (après aggregation - sans compter l'année - en comptant les études)
nbUniqCombStudies_afterAgg = length(data$StudyID)
# Informer utulisateur
cat("Nombre de combinaisons uniques (with Study) (après aggregation) :", nbUniqCombStudies_afterAgg, "\n")
###
# Nombre de combinaison unique (après aggregation - sans compter l'année)
nbUniqComb_afterAgg = length(unique(interaction(data$Position, data$Device, data$EpochDuration, data$DropTime, data$BoutDuration)))
# Informer utulisateur
cat("Nombre de combinaisons uniques (après aggregation - sans compter l'année) :", nbUniqComb_afterAgg, "\n")
###
######################################################
#############
whichWay = 2 #1 = manual, #2 = automatic (all or selected permutations) #HUMAN CHOICE
savePlot = TRUE #TRUE or FALSE to save plot in PNG  #HUMAN CHOICE
addStartYear = TRUE #FALSE #decide if we should add start year to analysed factors #HUMAN CHOICE
## WAY 1: on sait ce que l'on veut
if (whichWay==1){
if(addStartYear){
#Add starting time of assessment
variable_order = c("Device", "StartYear", "Position", "EpochDuration", "DropTime", "BoutDuration", "StudyID")
variable_order = c("Device", "Position", "EpochDuration", "DropTime", "BoutDuration", "StudyID")
} else {
# This is good (before adding StartYear)
variable_order = c("Position", "Device", "EpochDuration", "DropTime", "BoutDuration", "StudyID") #good if not StartYear
}
#Old
#variable_order = c("Position", "Device", "DropTime", "EpochDuration", "StudyID")
#variable_order = c("Position", "Device", "DropTime", "StudyID")
#variable_order = c("Position", "Device", "StudyID")
pathSavePlot = file.path(RES_PATH, "Arbre_Descriptif_Publication.png")
plotTitle = "Classification of Studies by Method"
# Get tree, plot and save it
#   it is simple so we can loop it easily to change variable_order or typeOfPlot
createSavePlotTree(data, variable_order, savePlot, pathSavePlot, plotTitle)
} else if (whichWay==2){
doOnlySelectedPermutations <- TRUE
if(doOnlySelectedPermutations){
# Liste des permutations selectionnées
# don't put StudyID at the end because we do it after (in the loop)
if (addStartYear){
selected_permutations <- list(
c("Position", "Device", "StartYear", "EpochDuration", "DropTime", "BoutDuration"),
c("Position", "StartYear", "Device", "EpochDuration", "DropTime", "BoutDuration"),
c("StartYear", "Device", "Position", "EpochDuration", "DropTime", "BoutDuration"),
c("Device", "StartYear", "Position", "EpochDuration", "DropTime", "BoutDuration"),
c("Position", "EpochDuration", "DropTime", "BoutDuration", "Device", "StartYear")
)
} else {
selected_permutations <- list(
c("Position", "Device", "EpochDuration", "DropTime", "BoutDuration"),
c("Device", "Position", "EpochDuration", "DropTime", "BoutDuration"),
c("Position", "EpochDuration", "DropTime", "BoutDuration", "Device")
)
}
# Convertir la liste en une matrice
permutations <- do.call(rbind, selected_permutations)
} else {
# Variables à permuter (sans 'StudyID')
variables_to_permute <- c("Position", "Device", "DropTime", "EpochDuration", "BoutDuration")
# Générer toutes les permutations possibles
permutations <- permutations(n = length(variables_to_permute),
r = length(variables_to_permute),
v = variables_to_permute)
}
# Boucler sur chaque permutation
for (i in 1:nrow(permutations)) {
# Obtenir la permutation courante
perm <- permutations[i, ]
# Construire variable_order en ajoutant 'StudyID' à la fin
variable_order <- c(perm, "StudyID")
# Construire une chaîne représentant l'ordre des variables
variable_order_str <- paste(variable_order, collapse = "_")
# Construire le nom du fichier de sortie
file_name <- paste0("Arbre_Descriptif_", variable_order_str, ".png")
# Chemin complet du fichier de sortie
output_folder = file.path(RES_PATH, "allPermutations")
dir.create(output_folder, recursive = TRUE)
pathSavePlot <- file.path(output_folder, file_name)
# Titre du graphique (optionnel)
#plotTitle <- paste("Classification of Studies by", paste(perm, collapse = ", "))
plotTitle <- "Classification of Studies by Method"
# Générer et sauvegarder le plot
createSavePlotTree(data, variable_order, savePlot = TRUE, pathSavePlot, plotTitle)
# Informer de la progression
cat("\n", "Plot enregistré pour l'ordre :", variable_order_str, "\n")
}
}
# Sankey diagram
# Par exemple, diagramme Sankey sur
#   EpochDuration -> DropTime -> BoutDuration
pathSankey <- file.path(RES_PATH, "Sankey_Epoch-Drop-Bout.png")
mySankey <- createSaveSankey_3var(
data        = data,
varList     = c("EpochDuration","DropTime","BoutDuration"),
pathSavePlot= pathSankey,
plotTitle   = "Sankey Diagram: Epoch -> DropTime -> BoutDuration",
doSavePlot  = TRUE
)
# Le plot ggplot2 est renvoyé : mySankey
print(mySankey)
View(data)
library(metafor)
install.packages(metafor)
install.packages("metafor")
library(metafor)
# Données des ICC avec IC95% récupérés des études
dat <- data.frame(
study = c("Hickey2017", "Lyden2017", "Pavey2017", "Wullems2017"),
ICC = c(0.941, 0.92, 0.92, 0.95),
lo = c(0.90, 0.85, 0.75, 0.90),
hi = c(0.98, 0.95, 0.97, 0.98),
N = c(20, 13, 21, 40),
Placement = c("Back", "Thigh", "Wrist", "Thigh") # Position du capteur
)
# Convertir ICC en Fisher’s Z
dat$z <- 0.5 * log((1 + dat$ICC) / (1 - dat$ICC))
dat$z_lo <- 0.5 * log((1 + dat$lo) / (1 - dat$lo))
dat$z_hi <- 0.5 * log((1 + dat$hi) / (1 - dat$hi))
dat$sei <- (dat$z_hi - dat$z_lo) / (2 * 1.96)
# Méta-analyse des ICC (modèle à effets aléatoires)
res <- rma.uni(yi = dat$z, sei = dat$sei, data = dat, method = "REML")
summary(res)
# Forest plot
forest(res, slab=dat$study, xlab="Fisher's Z", mlab="Random Effects Model")
res$I2
summary(res)$estimate
res$estimate
res$zval
View(res)
res$b
res$b[1,1]
res$b[[1]]
estimateZ <- res$b[[1]]
estimateICC <- exp(2 * estimateZ) - 1 / (exp(2 * estimateZ) + 1)
estimateICC
estimateZ
2 * estimateZ
exp(2 * estimateZ)
(exp(2 * estimateZ) + 1)
(exp(2 * estimateZ) - 1) / (exp(2 * estimateZ) + 1)
print(paste("Estimate ICC =", estimateICC))
print(paste("Estimate ICC =", round(estimateICC,2)))
estimateZ <- res$b[[1]]
estimateICC <- (exp(2 * estimateZ) - 1) / (exp(2 * estimateZ) + 1)
print(paste("Estimate ICC =", round(estimateICC,2)))
res_mod <- rma.uni(yi = dat$z, sei = dat$sei, mods = ~ Placement, data = dat, method = "REML")
summary(res_mod)
# Résumé des résultats
summary(res)
library(metafor)
# Données des ICC avec IC95% récupérés des études
dat <- data.frame(
study = c("Hickey2017", "Lyden2017", "Pavey2017", "Wullems2017"),
ICC = c(0.941, 0.92, 0.92, 0.95, 0.21),
lo = c(0.90, 0.85, 0.75, 0.90, 0.16),
hi = c(0.98, 0.95, 0.97, 0.98, 0.26),
N = c(20, 13, 21, 40),
Placement = c("Back", "Thigh", "Wrist", "Thigh") # Position du capteur
)
library(metafor)
# Données des ICC avec IC95% récupérés des études
dat <- data.frame(
study = c("Hickey2017", "Lyden2017", "Pavey2017", "Wullems2017"),
ICC = c(0.941, 0.92, 0.92, 0.95, 0.21),
lo = c(0.90, 0.85, 0.75, 0.90, 0.16),
hi = c(0.98, 0.95, 0.97, 0.98, 0.26),
N = c(20, 13, 21, 40, 60),
Placement = c("Back", "Thigh", "Wrist", "Thigh") # Position du capteur
)
library(metafor)
# Données des ICC avec IC95% récupérés des études
dat <- data.frame(
study = c("Hickey2017", "Lyden2017", "Pavey2017", "Wullems2017"),
ICC = c(0.941, 0.92, 0.92, 0.95, 0.21),
lo = c(0.90, 0.85, 0.75, 0.90, 0.16),
hi = c(0.98, 0.95, 0.97, 0.98, 0.26),
N = c(20, 13, 21, 40, 60),
Placement = c("Back", "Thigh", "Wrist", "Thigh", "Wrist") # Position du capteur
)
library(metafor)
# Données des ICC avec IC95% récupérés des études
dat <- data.frame(
study = c("Hickey2017", "Lyden2017", "Pavey2017", "Wullems2017", "Bizarre1999"),
ICC = c(0.941, 0.92, 0.92, 0.95, 0.21),
lo = c(0.90, 0.85, 0.75, 0.90, 0.16),
hi = c(0.98, 0.95, 0.97, 0.98, 0.26),
N = c(20, 13, 21, 40, 60),
Placement = c("Back", "Thigh", "Wrist", "Thigh", "Wrist") # Position du capteur
)
# Convertir ICC en Fisher’s Z
dat$z <- 0.5 * log((1 + dat$ICC) / (1 - dat$ICC))
dat$z_lo <- 0.5 * log((1 + dat$lo) / (1 - dat$lo))
dat$z_hi <- 0.5 * log((1 + dat$hi) / (1 - dat$hi))
dat$sei <- (dat$z_hi - dat$z_lo) / (2 * 1.96)
# Méta-analyse des ICC (modèle à effets aléatoires)
res <- rma.uni(yi = dat$z, sei = dat$sei, data = dat, method = "REML")
# Résumé des résultats
summary(res)
# Get mean estimate of ICC (transform from Z to ICC)
estimateZ <- res$b[[1]]
estimateICC <- (exp(2 * estimateZ) - 1) / (exp(2 * estimateZ) + 1)
print(paste("Estimate ICC =", round(estimateICC,2)))
# Forest plot
forest(res, slab=dat$study, xlab="Fisher's Z", mlab="Random Effects Model")
# Vérifier l'hétérogénéité
res$I2
library(metafor)
# Données des ICC avec IC95% récupérés des études
dat <- data.frame(
study = c("Hickey2017", "Lyden2017", "Pavey2017", "Wullems2017", "Bizarre1999"),
ICC = c(0.941, 0.92, 0.92, 0.95, 0.61),
lo = c(0.90, 0.85, 0.75, 0.90, 0.56),
hi = c(0.98, 0.95, 0.97, 0.98, 0.66),
N = c(20, 13, 21, 40, 20),
Placement = c("Back", "Thigh", "Wrist", "Thigh", "Wrist") # Position du capteur
)
# Convertir ICC en Fisher’s Z
dat$z <- 0.5 * log((1 + dat$ICC) / (1 - dat$ICC))
dat$z_lo <- 0.5 * log((1 + dat$lo) / (1 - dat$lo))
dat$z_hi <- 0.5 * log((1 + dat$hi) / (1 - dat$hi))
dat$sei <- (dat$z_hi - dat$z_lo) / (2 * 1.96)
# Méta-analyse des ICC (modèle à effets aléatoires)
res <- rma.uni(yi = dat$z, sei = dat$sei, data = dat, method = "REML")
# Résumé des résultats
summary(res)
# Get mean estimate of ICC (transform from Z to ICC)
estimateZ <- res$b[[1]]
estimateICC <- (exp(2 * estimateZ) - 1) / (exp(2 * estimateZ) + 1)
print(paste("Estimate ICC =", round(estimateICC,2)))
# Forest plot
forest(res, slab=dat$study, xlab="Fisher's Z", mlab="Random Effects Model")
# Vérifier l'hétérogénéité
res$I2
library(metafor)
# Données des ICC avec IC95% récupérés des études
dat <- data.frame(
study = c("Hickey2017", "Lyden2017", "Pavey2017", "Wullems2017", "Bizarre1999"),
ICC = c(0.941, 0.92, 0.92, 0.95, 0.60),
lo = c(0.90, 0.85, 0.75, 0.90, 0.50),
hi = c(0.98, 0.95, 0.97, 0.98, 0.70),
N = c(20, 13, 21, 40, 20),
Placement = c("Back", "Thigh", "Wrist", "Thigh", "Wrist") # Position du capteur
)
# Convertir ICC en Fisher’s Z
dat$z <- 0.5 * log((1 + dat$ICC) / (1 - dat$ICC))
dat$z_lo <- 0.5 * log((1 + dat$lo) / (1 - dat$lo))
dat$z_hi <- 0.5 * log((1 + dat$hi) / (1 - dat$hi))
dat$sei <- (dat$z_hi - dat$z_lo) / (2 * 1.96)
# Méta-analyse des ICC (modèle à effets aléatoires)
res <- rma.uni(yi = dat$z, sei = dat$sei, data = dat, method = "REML")
# Résumé des résultats
summary(res)
# Get mean estimate of ICC (transform from Z to ICC)
estimateZ <- res$b[[1]]
estimateICC <- (exp(2 * estimateZ) - 1) / (exp(2 * estimateZ) + 1)
print(paste("Estimate ICC =", round(estimateICC,2)))
# Forest plot
forest(res, slab=dat$study, xlab="Fisher's Z", mlab="Random Effects Model")
# Vérifier l'hétérogénéité
res$I2
library(metafor)
# Données des ICC avec IC95% récupérés des études
dat <- data.frame(
study = c("Hickey2017", "Lyden2017", "Pavey2017", "Wullems2017", "Bizarre1999"),
ICC = c(0.941, 0.92, 0.92, 0.95, 0.60),
lo = c(0.90, 0.85, 0.75, 0.90, 0.50),
hi = c(0.98, 0.95, 0.97, 0.98, 0.70),
N = c(20, 13, 21, 40, 20),
Placement = c("Back", "Thigh", "Wrist", "Thigh", "Wrist") # Position du capteur
)
# Convertir ICC en Fisher’s Z
dat$z <- 0.5 * log((1 + dat$ICC) / (1 - dat$ICC))
dat$z_lo <- 0.5 * log((1 + dat$lo) / (1 - dat$lo))
dat$z_hi <- 0.5 * log((1 + dat$hi) / (1 - dat$hi))
dat$sei <- (dat$z_hi - dat$z_lo) / (2 * 1.96)
# Méta-analyse des ICC (modèle à effets aléatoires)
res <- rma.uni(yi = dat$z, sei = dat$sei, data = dat, method = "REML")
# Résumé des résultats
summary(res)
# Get mean estimate of ICC (transform from Z to ICC)
estimateZ <- res$b[[1]]
estimateICC <- (exp(2 * estimateZ) - 1) / (exp(2 * estimateZ) + 1)
print(paste("Estimate ICC =", round(estimateICC,2)))
# Forest plot
forest(res, slab=dat$study, xlab="Fisher's Z", mlab="Random Effects Model")
# Vérifier l'hétérogénéité
res$I2
library(metafor)
# Données des ICC avec IC95% récupérés des études
dat <- data.frame(
study = c("Hickey2017", "Lyden2017", "Pavey2017", "Wullems2017", "Bizarre1999"),
ICC = c(0.941, 0.92, 0.92, 0.95, 0.80),
lo = c(0.90, 0.85, 0.75, 0.90, 0.70),
hi = c(0.98, 0.95, 0.97, 0.98, 0.90),
N = c(20, 13, 21, 40, 20),
Placement = c("Back", "Thigh", "Wrist", "Thigh", "Wrist") # Position du capteur
)
# Convertir ICC en Fisher’s Z
dat$z <- 0.5 * log((1 + dat$ICC) / (1 - dat$ICC))
dat$z_lo <- 0.5 * log((1 + dat$lo) / (1 - dat$lo))
dat$z_hi <- 0.5 * log((1 + dat$hi) / (1 - dat$hi))
dat$sei <- (dat$z_hi - dat$z_lo) / (2 * 1.96)
# Méta-analyse des ICC (modèle à effets aléatoires)
res <- rma.uni(yi = dat$z, sei = dat$sei, data = dat, method = "REML")
# Résumé des résultats
summary(res)
# Get mean estimate of ICC (transform from Z to ICC)
estimateZ <- res$b[[1]]
estimateICC <- (exp(2 * estimateZ) - 1) / (exp(2 * estimateZ) + 1)
print(paste("Estimate ICC =", round(estimateICC,2)))
# Forest plot
forest(res, slab=dat$study, xlab="Fisher's Z", mlab="Random Effects Model")
# Vérifier l'hétérogénéité
res$I2
library(metafor)
# Données des ICC avec IC95% récupérés des études
dat <- data.frame(
study = c("Hickey2017", "Lyden2017", "Pavey2017", "Wullems2017", "Bizarre1999"),
ICC = c(0.941, 0.92, 0.92, 0.95, 0.85),
lo = c(0.90, 0.85, 0.75, 0.90, 0.75),
hi = c(0.98, 0.95, 0.97, 0.98, 0.95),
N = c(20, 13, 21, 40, 20),
Placement = c("Back", "Thigh", "Wrist", "Thigh", "Wrist") # Position du capteur
)
# Convertir ICC en Fisher’s Z
dat$z <- 0.5 * log((1 + dat$ICC) / (1 - dat$ICC))
dat$z_lo <- 0.5 * log((1 + dat$lo) / (1 - dat$lo))
dat$z_hi <- 0.5 * log((1 + dat$hi) / (1 - dat$hi))
dat$sei <- (dat$z_hi - dat$z_lo) / (2 * 1.96)
# Méta-analyse des ICC (modèle à effets aléatoires)
res <- rma.uni(yi = dat$z, sei = dat$sei, data = dat, method = "REML")
# Résumé des résultats
summary(res)
# Get mean estimate of ICC (transform from Z to ICC)
estimateZ <- res$b[[1]]
estimateICC <- (exp(2 * estimateZ) - 1) / (exp(2 * estimateZ) + 1)
print(paste("Estimate ICC =", round(estimateICC,2)))
# Forest plot
forest(res, slab=dat$study, xlab="Fisher's Z", mlab="Random Effects Model")
# Vérifier l'hétérogénéité
res$I2
library(metafor)
# Données des ICC avec IC95% récupérés des études
dat <- data.frame(
study = c("Hickey2017", "Lyden2017", "Pavey2017", "Wullems2017") #, "Bizarre1999"),
ICC = c(0.941, 0.92, 0.92, 0.95) #, 0.85),
library(metafor)
# Données des ICC avec IC95% récupérés des études
dat <- data.frame(
study = c("Hickey2017", "Lyden2017", "Pavey2017", "Wullems2017"), #, "Bizarre1999"),
ICC = c(0.941, 0.92, 0.92, 0.95), #, 0.85),
lo = c(0.90, 0.85, 0.75, 0.90), #, 0.75),
hi = c(0.98, 0.95, 0.97, 0.98), #, 0.95),
N = c(20, 13, 21, 40), #, 20),
Placement = c("Back", "Thigh", "Wrist", "Thigh") #, "Wrist") # Position du capteur
)
# Convertir ICC en Fisher’s Z
dat$z <- 0.5 * log((1 + dat$ICC) / (1 - dat$ICC))
dat$z_lo <- 0.5 * log((1 + dat$lo) / (1 - dat$lo))
dat$z_hi <- 0.5 * log((1 + dat$hi) / (1 - dat$hi))
dat$sei <- (dat$z_hi - dat$z_lo) / (2 * 1.96)
# Méta-analyse des ICC (modèle à effets aléatoires)
res <- rma.uni(yi = dat$z, sei = dat$sei, data = dat, method = "REML")
# Résumé des résultats
summary(res)
# Get mean estimate of ICC (transform from Z to ICC)
estimateZ <- res$b[[1]]
estimateICC <- (exp(2 * estimateZ) - 1) / (exp(2 * estimateZ) + 1)
print(paste("Estimate ICC =", round(estimateICC,2)))
# Forest plot
forest(res, slab=dat$study, xlab="Fisher's Z", mlab="Random Effects Model")
# Vérifier l'hétérogénéité
res$I2
(((1463 + 34) * 0.996) + ((585+48)*0.955) + ((1+47+497+82)*0.806) + ((4+201+2930)*0.951)) / (1463+34+585+48+1+47+497+82+4+201+2930)
(NbSedentary * 0.996) + (NbStanding*0.955) + (NbLIPA*0.806) + (NbMVPA*0.951)) / (NbSedentary+NbStanding+NbLIPA+NbMVPA)
NbSedentary = 1463+1
NbStanding = 588+58
NbLIPA = 12+48+448+272
NbMVPA = 61+2951
RandomForst = (NbSedentary * 0.996) + (NbStanding*0.955) + (NbLIPA*0.806) + (NbMVPA*0.951)) / (NbSedentary+NbStanding+NbLIPA+NbMVPA)
NbSedentary = 1463+1
NbStanding = 588+58
NbLIPA = 12+48+448+272
NbMVPA = 61+2951
RandomForst = ((NbSedentary * 0.996) + (NbStanding*0.955) + (NbLIPA*0.806) + (NbMVPA*0.951)) / (NbSedentary+NbStanding+NbLIPA+NbMVPA)
RandomForst
